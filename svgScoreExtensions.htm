<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
	<title>Score Attributes</title>
	<base target="_top" />
	<link href="../../styleSheet.css" rel="stylesheet" type="text/css" />
	<script src="../../javascript.js" type="text/javascript"></script>
	<script type="text/javascript">
		trap();
	</script>
	<style type="text/css">
		.code {
			font-family: 'Courier New', Courier, monospace;
			font-weight: bold;
			color: #1010C6;
		}

		.red {
			color: #FF0000;
		}

		.auto-style4 {
			height: 24px;
		}
	</style>
</head>
<body style="width: 780px">
	<!-- top of main div -->
	<div>
		<!-- top of summary -->
		<div>
			<p class="header1">
				SVG Score Extensions
			</p>
			<hr class="hrHeight1" />
			This document describes the SVG extensions that are written and read by the latest versions of my
        <a href="../moritz/assistantComposer/assistantComposer.html">Assistant Composer</a> and 
                <a href="../aboutAssistantPerformer.html">Assistant Performer</a> software.<br />
                 It is being tracked in the Assistant Performer&#39;s GitHub repository at <a href="https://github.com/notator/assistant-performer">https://github.com/notator/assistant-performer</a>.
			<br />
            <span style="color: #FF0000">Note that these extensions are subject to change without notice!</span><br /><br />
            This version introduces continuous controller settings (<span class="code">ccSettings</span>), that can be attached to <em>Input
				Chords</em>.<br /> 
			It also contains a major revision of the <span class="code">trkOptions</span>.<br />
			<br />
			<strong>Status of this document</strong>: Moritz&#39; Assistant Composer application writes the file format, and its code is therefore the final authority. The Assistant Performer is tested exhaustively with scores created by the latest version of the Assistant Composer, and both programs are changed if any difficulty arises. So, those two programs should agree on the file format.<br />
			This document is kept up to date, but if there is any discrepancy between the programs’ code and this document, this document should be updated accordingly.
			It was last checked in March 2016.<br />
			<div class="note" style="padding: 5px 10px 5px 10px; margin: 5px 0 5px 0"><span class="red">Unanswered question</span>: (see <span class="code">trkRef.msPosition</span>)
			In all the test scores until now,	<em>Input Chord</em>s are aligned vertically with the first <em>Output Chord</em>
			in the <em>Trk</em>s to which they refer. But is that always necessary? Could a <em>Trk</em>&#39;s msPositionInScore actually be
			different from that of its containing <em>InputChord </em>? If that were possible, would there be any useful consequences?</div>
			<br />
			<hr class="hrHeight1" />
			<br />
			<div class="note" style="width: 70%; margin-right: auto; margin-left: auto;">
				<strong>Document conventions</strong>:<br />
				Elements that are SVG &lt;g&gt; elements with a class attribute are written in normal italics.<br />
				&nbsp;&nbsp;&nbsp;
			 For example: an <em>OutputStaff</em> is: &lt;g class="outputStaff" ...&gt;...&lt;/g&gt; in the SVG.<br />
				Elements and attributes that are members of the <span class="code">score</span> namespace are written in blue code.<br />
				&nbsp;&nbsp;&nbsp;
			 For example: OutputVoice has a <span class="code">score:midiChannel</span> attribute.<br />
				The namespace is omitted inside elements that are themselves inside the score namespace.<br />
				&nbsp;&nbsp;&nbsp;
			 For example:<span class="code">score:midiChord</span> contains a <span class="code">basicChords</span> element.
			</div>
			<br />
			There is a complete, more formal description of the extensions <a href="#namespace" target="_self">below</a>, but first
			a broad 
			summary:
			<p class="boldHeader2">Summary (March 2016)</p>
			At the top level, a <em>System</em> contains one or more <em>OutputStaff</em>, and zero or more <em>InputStaff</em> elements.<br />
			An <em>OutputStaff</em> contains one or two <em>Output Voice</em> elements, which in turn contain <em>Output Chord</em>
			and <em>Rest</em> elements.<br />
			Each <em>Output Chord</em> contains a <span class="code">midiChord</span> element containing midi information that is ultimately
			sent to a midi <em>output</em> device.<br />
			<br />
			<div class="note" style="width: 90%; margin-right: auto; margin-left: auto;">
				The Assistant Performer deals with <em><strong>Track</strong></em> objects. A <em><strong>Track</strong></em> contains the
				<em>complete</em> sequence of midi chord 
				and rest objects for a particular <span class="code">midiChannel</span> in the score, and is constructed from the <span class="code">midiChord</span>s and <em>Rest</em>s 
				in <em>OutputVoice</em>s that are at the same vertical position in successive 
				<em>System</em>s in the score. Such <em>OutputVoice</em>s have the same <span class="code">score:midiChannel</span>.<br />
				A <em><strong>Trk</strong></em> is a subsection of a <strong><em>Track</em></strong>, and contains a limited sequence of
				chords and rests.<em><strong> </strong></em>
				Names such as <span class="code">trkRef</span>,&nbsp; <span class="code">trkOptions</span>, <span class="code">trkOffs</span>.
				etc. refer to <em><strong>Trk</strong></em>s.
			</div>
			<br />
			<em>Input Staff</em> elements contain one or two <em>Input Voice</em>s, which in turn contain <em>Input Chord</em>s and
			<em>Rest</em>s. Each <em>Input
                Chord</em> contains a list of <span class="code">inputNote</span> elements.<span class="code"> inputNote</span> elements
			handle midi information coming from
            a midi <em>input</em>
			device.
			Each <em>Input
                Chord</em> can also contain a <span class="code">ccSettings</span> and/or a&nbsp; <span class="code">trkOptions</span>
			element.<br />
			<br />
			A <span class="code">ccSettings</span> element is a switch that defines the behaviour of the standard midi keyboard 
			continuous controllers (pressure, pitchWheel and modWheel), with respect to each output track, from 
			this point on in a performance. (The Assistant Composer never writes synchronous <span class="code">ccSettings</span>.)
			The behaviour can be different for different output tracks. 
			The Assistant Performer treats controllers <em>individually</em> within the <span class="code">ccSettings</span>: If a particular
			controller is 
			not set for a particular track, the current setting persists.<br />
			The Assistant Performer&#39;s default, before the score is
			loaded, is for all three 
			controllers to be switched off for all tracks.<br />
			<br />

			A <span class="code">trkOptions</span> element defines options that are applied to a <em><strong>Trk</strong></em> before
			a performance begins. 
			The <span class="code">trkOptions</span> that apply are the result of cascading the <span class="code">trkOptions</span>
			in the <em>Input
                Chord</em>, <span class="code">inputNote</span>, <span class="code">noteOn</span>, <span class="code">noteOff</span>,
			<span class="code">seq</span> and <span class="code">trkRef</span> elements (see below). The Assistant Performer does 
			the cascading, and overrides higher level 
			options <em>individually</em>. It also persists the&nbsp; <span class="code">trkOptions</span> defined in an <em>Input
                Chord</em>, as if they are defined in all subsequent <em>Input
                Chord</em>s until the next <em>Input
                Chord</em> that contains an explicit <span class="code">trkOptions</span> element. The persistence over time is also
			handled 
			<em>individually</em> per option.<br />
			The Assistant Performer&#39;s default <span class="code">trkOptions</span> are such that the score plays as written in 
			the <em>OutputVoice</em>s.<br />
			<br />
			An <span class="code">inputNote</span> element can contain a <span class="code">trkOptions</span> and/or a <span class="code">noteOn</span> and/or a <span class="code">noteOff</span> element.<br />
			<span class="code">noteOn</span>, and <span class="code">noteOff</span> elements can contain a <span class="code">trkOptions</span>
			and/or a <span class="code">seq</span> and/or a <span class="code">trkOffs</span> element.<br />
			A <span class="code">seq</span> element can contain a <span class="code">trkOptions</span> element, and it <em>must</em>
			contain a list of <span class="code">trkRef</span> elements.<br />
			A <span class="code">trkRef</span> defines a Trk (a section of an output track). It can contain a <span class="code">trkOptions</span>
			element, and 
			must have the 
			following attributes:&nbsp; <span class="code">midiChannel</span> , <span class="code">msPosition</span> ,
			<span class="code">nMidiObjects</span>.<br />
			A <span class="code">trkOffs</span> element defines an output track to which a trackOff message will be sent when the 
			input <span class="code">noteOn</span>
			or <span class="code">noteOff</span> arrives. A <span class="code">trkOffs</span> element has a single attribute (<span class="code">midiChannels</span>)
			which is a string of midi channel indices separated by space characters.<br />
			<br />
			This file definition allows very complex output events to be triggered using single <span class="code">noteOn</span> and
			<span class="code">noteOff</span> input events, 
            but it also allows a single <span class="code">noteOn</span> to trigger a single
            one-note <span class="code">midiChord</span> &mdash; which would be like playing a &quot;prepared piano&quot;, except that
			the preparation
			can change during the performance.<br />
			Different scores can be created for performing the same output
            information at different levels of control. Recordings are performed by pressing
            a single button. Piano pieces are traditionally played by pressing a single 
            key for each note...<br />
			<br />
		</div>
		<!-- bottom of summary -->
		<hr class="hrHeight1" />
		<!-- top of SVG elements -->
		<div id="namespace">
			<p class="boldHeader2">
				Namespace
			</p>
			These extensions are contained in the following namespace:<br />
			<div class="code">
				xmlns:score="http://www.james-ingram-act-two.de/open-source/svgScoreExtensions.html"
			</div>
			<p class="boldHeader2">
				SVG &lt;g&gt; elements defining container types
			</p>
			<div class="note">
				Definition:
        An <strong><em><span style="font-size: 11px">msDuration</span></em></strong> is an absolute
            millisecond duration. msDurations are stored in the score as <span class="code">score:msDuration</span>
				values, and are are used to define the durations in default performances (i.e. when there is
            no live performer).<br />
				An <strong><em><span style="font-size: 11px">msDuration</span></em></strong> is
            also used to calculate an object&#39;s <strong><em><span style="font-size: 11px">msPositionInScore</span></em></strong>
				(the position in absolute milliseconds from the beginning of the score). Objects
            in different voices that have the same <em>msPositionInScore</em> are vertically aligned in space, and are always synchronous in default performances. In live performances, however, they may not be synchronous since <strong><em>Trk</em></strong>s are then being used, and there is a <span class="code">trkOption.speed</span>, that allows parallel <strong><em>Trk</em></strong>s to be played at different speeds. (This is possible, because <em>
				<strong>Track</strong></em>s are played in different threads in live performances.)<br />
			</div>
			<br />
			The following SVG &lt;g&gt; elements contain 
		both graphics and special types defined in the <span style="color: #0000FF">score:</span>
			namespace (see below).<br />
			These elements all have a class attribute that will be used by the Assistant
            Performer to identify their type.<br />
            <table>
				<colgroup style="padding-top: 4px">
					<col width="120" />
					<col width="*" />
				</colgroup>
				<tr valign="top">
					<td><em>System</em>
					</td>
					<td>
						<table>
							<tr>
								<td valign="top">
									<span class="attcon">Attributes</span>
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">class</span>
								</td>
								<td valign="top"><span class="code">"system"</span>
								</td>
							</tr>
							<tr>
								<td>Content
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">&lt;g.../g&gt;...</span>
								</td>
								<td valign="top">A list of one or more &lt;g.../g&gt; <em>Output Staff</em> elements
                                (<span class="code">class=&quot;outputStaff&quot;</span>). </td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">&lt;g.../g&gt;...</span>
								</td>
								<td valign="top">A list of zero or more &lt;g.../g&gt; <em>Input Staff</em> elements
                                (<span class="code">class=&quot;inputStaff&quot;</span>). </td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">&lt;g.../g&gt;</span>
								</td>
								<td valign="top">A list of staff connectors (vertical lines) in a single group. (<span class="code">class=&quot;staffConnectors&quot;</span>)
								</td>
							</tr>
						</table>
					</td>
				</tr>
				<tr valign="top">
					<td><em>Output Staff</em>
					</td>
					<td>
						<table>
							<tr>
								<td valign="top">
									<span class="attcon">Attributes</span>
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">class</span>
								</td>
								<td valign="top"><span class="code">"outputStaff"</span>
								</td>
							</tr>
                            							<tr>
								<td valign="top">
									<span class="code">score:staffName</span>
								</td>
								<td valign="top">A string (e.g. &quot;Flute&quot;) which is the name of the staff.
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">score:invisible</span>
								</td>
								<td valign="top">This attribute can only be present if the staff is invisible (i.e.
                                the staff contains no graphic information). This attribute is just a debugging convenience.
                                It is not needed (and should not be used) by the client software. If present, its
                                value is always &quot;1&quot;.<br />
									See the <span class="code">score:staffName</span> attribute.</td>
							</tr>

							<tr>
								<td valign="top">
									<span class="attcon">Content</span>
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">&lt;g.../g&gt;</span>
								</td>
								<td valign="top">A list of stafflines (horizontal lines) in a single group. (<span class="code">class=&quot;stafflines&quot;</span>)
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">&lt;g.../g&gt;</span>
								</td>
								<td valign="top">An<em> Output Voice</em> element (<span class="code">class=&quot;outputVoice&quot;</span>)
                                (see
								below). There must be at least one <em>Output Voice</em>.<br />
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">&lt;g.../g&gt;</span>
								</td>
								<td valign="top">An optional second <em>Output Voice</em> element (<span class="code">class=&quot;outputVoice&quot;</span>).<br />
									Moritz does not support more than two <em>Output Voice</em>s per <em>Output Staff</em>.
								</td>
							</tr>
						</table>
					</td>
				</tr>
				<tr valign="top">
					<td><em>Output Voice</em>
					</td>
					<td>
						<table>
							<tr>
								<td valign="top">
									<span class="attcon">Attributes</span>
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">class</span>
								</td>
								<td valign="top"><span class="code">"outputVoice"</span>
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">score:midiChannel</span>
								</td>
								<td valign="top">The (zero-based) MIDI channel index.<br />
									The <em>Output Voice</em>s in a score are always notated in <em>Output Staff</em>s
                                above the <em>Input Staff</em>s. Each <em>Output Voice</em> has its own MIDI channel,
                                and the MIDI channels are always in increasing order, from top to bottom of the
                                <em>Output Voice</em>s in the score, starting at 0.
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">score:voiceID</span>
								</td>
								<td valign="top">This value is used by <span class="code">inputNote</span> elements
                                to identify the <em>Output Voice</em>s to which they refer. This attribute, which
                                is only written to the file
                                if there are <em>Input Voice</em>s in the score, is necessary because Output Voices
                                can be printed in a top-bottom order that is different from the order in which they
                                were composed.</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">score:masterVolume</span>
								</td>
								<td valign="top">This value is used to initialize the 
								volume of this <em>Output Voice</em>&#39;s MIDI channel at the beginning of a performance.
                                This attribute is always 
								written to <em>Output Voice</em>s in the first bar of the score, but nowhere else.
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">Content</span>
								</td>
								<td valign="top">
									<br />
								</td>
							</tr>

							<tr>
								<td valign="top">
									<span class="attcon">&lt;text&gt;...&lt;/text&gt;</span>
								</td>
								<td valign="top">The voice&#39;s name (printed to the left of the voice). (<span class="code">class=&quot;staffName&quot;</span>)<br />
								</td>
							</tr>
                            							<tr>
								<td valign="top">
									<span class="attcon">&lt;use.../&gt;</span>
								</td>
								<td valign="top">A clef. (<span class="code">class=&quot;clef&quot;</span>)<br />
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">&lt;g.../&gt;...</span>
								</td>
								<td valign="top">One or more SVG &lt;g&gt; elements and &lt;line.../&gt; elements in
								left to right order in the score.<br />
                                    The &lt;line.../&gt;s are barlines that extend from the top to the bottom staffline in the staff (<span class="code">class=&quot;barline&quot;</span>).<br />
									The &lt;g.../&gt; objects can be<br />
									<em>Output Chord</em>s (<span class="code">class=&quot;outputChord&quot;</span>)<br />
									<em>Rest</em>s (<span class="code">class=&quot;rest&quot;</span>)<br />
									and<br />
									<em>Cautionary Chord</em>s (<span class="code">class=&quot;cautionaryChord&quot;</span>)<br />
									<em>ClefChangeSymbol</em>s (<span class="code">class=&quot;clefChange&quot;</span>)<br />
									<em>BeamBlock</em>s (<span class="code">class=&quot;beamBlock&quot;</span>)<br />
									(These last three objects contain no temporal performance information. The opacity of the <em>Output Voice</em>’s entire graphic content is toggled by the Assistant Performer to indicate whether the voice is performing or not.)<br />
								</td>
							</tr>
						</table>
					</td>
				</tr>
				<tr valign="top">
					<td><em>Output Chord</em>
					</td>
					<td>
						<table>
							<tr>
								<td valign="top">
									<span class="attcon">Attributes</span>
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">class</span>
								</td>
								<td valign="top"><span class="code">"outputChord"</span>
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">score:alignmentX</span>
								</td>
								<td valign="top">Optional Float: written only if the <em>OutputChord</em> is on a visible staff.<br />
									The x-coordinate at which the chord symbol is aligned in the score.<br />
									This is the number of pixels from the left edge of the SVG's viewBox.
                                The alignment coordinate is needed for user interaction with the score, but it is not easily
                                retrieved from the information in the chord&rsquo;s graphic components.
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">Content</span><br />
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">score:midiChord</span></td>
								<td valign="top">One object of this type (see below).</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">&lt;g&gt;...&lt;/g&gt;</span></td>
								<td valign="top">an SVG graphics
								group (<span class="code">class=&quot;graphics&quot;</span>). </td>
							</tr>
						</table>
					</td>
				</tr>
				<tr valign="top">
					<td><em>Input Staff
					</em>
					</td>
					<td>
						<table>
							<tr>
								<td valign="top">
									<span class="attcon">Attributes</span>
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">class</span>
								</td>
								<td valign="top"><span class="code">"inputStaff"</span>
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">score:staffName</span>
								</td>
								<td valign="top">A string (e.g. &quot;Input1&quot;) which is the name of the staff.
								</td>
							</tr>

							<tr>
								<td valign="top">
									<span class="attcon">Content</span>
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">&lt;g.../g&gt;</span>
								</td>
								<td valign="top">A list of stafflines in a single group. (<span class="code">class=&quot;stafflines&quot;</span>)
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">&lt;g.../g&gt;</span>
								</td>
								<td valign="top">An <em>Input Voice</em> element (<span class="code">class=&quot;inputVoice&quot;</span>)
                                (see
								below). There must be at least one <em>Input Voice</em> in an <em>Input Staff</em><br />
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">&lt;g.../g&gt;</span>
								</td>
								<td valign="top">An optional second <em>Input Voice</em> element (<span class="code">class=&quot;inputVoice&quot;</span>).<br />
									Moritz does not support more than two <em>Input Voice</em>s per <em>Input Staff</em>.
								</td>
							</tr>
						</table>
					</td>
				</tr>
				<tr valign="top">
					<td><em>Input Voice</em>
					</td>
					<td>
						<table>
							<tr>
								<td valign="top">
									<span class="attcon">Attributes</span>
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">class</span>
								</td>
								<td valign="top"><span class="code">"inputVoice"</span>
								</td>
							</tr>
							<tr>
								<td valign="top" class="code">score:midiChannel</td>
								<td valign="top">Optional. The channel index of the midi input device that will trigger
                                events in this <em>Input Voice</em>. If not present, the midi input device&#39;s
                                channel is ignored, and all incoming midi events trigger events in this <em>Input Voice</em>.<br />
								</td>
							</tr>

							<tr>
								<td valign="top">
									<span class="attcon">Content</span>
								</td>
								<td valign="top">
									<br />
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">&lt;use.../&gt;</span>
								</td>
								<td valign="top">A clef.<br />
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">&lt;text&gt;...&lt;/text&gt;</span>
								</td>
								<td valign="top">The voice&#39;s name (graphics, printed to the left of the voice.).<br />
								</td>
							</tr>
                            <tr>
								<td valign="top">
									<span class="attcon">&lt;g.../&gt;...</span>
								</td>
								<td valign="top">One or more SVG &lt;g&gt; elements and &lt;line.../&gt; elements in
								left to right order in the score.<br />
                                    The &lt;line.../&gt;s are barlines that extend from the top to the bottom staffline in the staff (<span class="code">class=&quot;barline&quot;</span>).<br />
									The &lt;g.../&gt; objects can be<br />
									<em>Input Chord</em>s (<span class="code">class=&quot;inputChord&quot;</span>)<br />
									<em>Rest</em>s (<span class="code">class=&quot;rest&quot;</span>)<br />
									and<br />
									<em>Cautionary Chord</em>s (<span class="code">class=&quot;cautionaryChord&quot;</span>)<br />
									<em>ClefChangeSymbol</em>s (<span class="code">class=&quot;clefChange&quot;</span>)<br />
									<em>BeamBlock</em>s (<span class="code">class=&quot;beamBlock&quot;</span>)<br />
									(These last three objects contain no temporal performance information. The opacity of the <em>Output Voice</em>’s entire graphic content is toggled by the Assistant Performer to indicate whether the voice is performing or not.)<br />
								</td>
							</tr>
						</table>
					</td>
				</tr>
				<tr valign="top">
					<td><em>Input Chord</em>
					</td>
					<td>
						<table>
							<tr>
								<td valign="top">
									<span class="attcon">Attributes</span>
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">class</span>
								</td>
								<td valign="top"><span class="code">"inputChord"</span>
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">score:alignmentX</span>
								</td>
								<td valign="top">Optional Float: written only if the <em>InputChord</em> is on a visible staff.<br />
									The x-coordinate at which the chord symbol is aligned in the score.<br />
									This is the number of pixels from the left edge of the SVG's viewBox.
                                The alignment coordinate is needed for user interaction with the score, but it is not easily
                                retrieved from the information in the chord&rsquo;s graphic components.
								</td>
							</tr>
							<tr>
								<td valign="top" class="code">score:msDuration</td>
								<td valign="top">Integer: The msDuration in the score of this <em>Input Chord</em>.<br />
									This value is used by the Assistant Performer to calculate the <em>Input Chord</em>&#39;s
                                msPosition, which is the msPosition of the <em>Trk</em>s to which the <em>Input Chord</em>
									points.<br />
									Each <em>Input Chord</em> is has the same msPosition as (and is vertically aligned
                                to) its related <em>Trk</em>s.<br />
									<strong>Remarks</strong>:<br />
									1. <em>Input Voice</em>s contain no output information, so they are ignored in default
                                performances. This means that <em>Input Chord</em> msDurations are never converted
                                to real milliseconds.<br />
									2. It would have been possible to have had an msPosition attribute here, but the
                                Assistant Performer calculates the msPositions of all <em>Output Chord</em>s and
                                <em>Rest</em>s anyway (so that it can send simultaneous <em>Output Chord</em>s in
                                different voices simultaneously). The Assistant Performer software therefore becomes
                                simpler if <em>Input Chord</em>s are not treated differently here.</td>
							</tr>
							<tr>
								<td valign="top" class="code">score:lyric</td>
								<td valign="top">Optional. A lyric string</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">Content</span><br />
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">score:ccSettings</span></td>
								<td valign="top">Optional. One element of this type. Defines the behaviour of the standard midi keyboard continuous 
									controllers (pressure, pitchWheel and modWheel), with respect to each output track, from this point on in a performance.<br />
									The Assistant Performer&#39;s default, before the score is
			loaded, is for all three 
			controllers to be disabled for all tracks.</td>
							</tr>
							<tr>
								<td valign="top" class="code">score:trkOptions</td>
								<td valign="top">Optional. If present, changes the current input track&#39;s <span class="code">trkOptions</span>
									settings to the result of cascading 
									these settings over the current settings. All settings are cascaded individually.<br />
									The Assistant Performer&#39;s default <span class="code">trkOptions</span> settings are such 
									that the score plays as defined in its <em>OutputVoice</em>s.</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">score:inputNotes</span></td>
								<td valign="top">One element of this type. A outputSequence of <span class="code">inputNote</span>.
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">&lt;g&gt;...&lt;/g&gt;</span></td>
								<td valign="top">an SVG graphics
								group (<span class="code">class=&quot;graphics&quot;</span>). </td>
							</tr>
						</table>
					</td>
				</tr>
				<tr valign="top">
					<td><em>Rest</em>
					</td>
					<td>
						<table>
							<tr>
								<td valign="top">
									<span class="attcon">Attributes</span>
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">class</span>
								</td>
								<td valign="top"><span class="code">&quot;rest&quot;</span>
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">score:alignmentX</span>
								</td>
								<td valign="top">Optional Float: written only if the rest is on a visible staff.<br />
									The x-coordinate at which the chord symbol is aligned in the score.<br />
									This is the number of pixels from the left edge of the SVG's viewBox.
                                The alignment coordinate is needed for user interaction with the score, but it is not easily
                                retrieved from the information in the chord&rsquo;s graphic components.
								</td>
							</tr>
							<tr>
								<td valign="top" class="code">score:msDuration
								</td>
								<td valign="top">Integer: the msDuration in the score of the <em>Rest</em> .<br />
									This is the millisecond duration of the <em>Rest</em> in default performances.
								</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">Content</span><br />
								</td>
								<td valign="top"></td>
							</tr>
							<tr>
								<td valign="top">
									<span class="code">&lt;text&gt;...&lt;/text&gt;</span></td>
								<td valign="top">The rest character (graphics).
								</td>
							</tr>
						</table>
					</td>
				</tr>
			</table>
			<br />
		</div>
		<!-- bottom of SVG elements -->
		<hr class="hrHeight1" />
		<!-- top of score namespace -->
		<div>
			<p class="boldHeader2">
				The score: namespace
			</p>
			(The score: prefix is omitted whenever an attribute or element is contained by an existing element in the namespace.)
                <table style="vertical-align: top;">
					<colgroup>
						<col width="180" />
						<col width="*" />
					</colgroup>
					<tr>
						<td valign="top">
							<span class="code">score:msDuration</span>
						</td>
						<td valign="top">An integer (greater than 0): The <em>msDuration</em> of a <em>Rest</em> or <em>Input Chord</em>.<br />
							<em>Output Chord</em> <em>msDuration</em>s are calculated from the <em>msDuration</em>s
                    of their <span class="code">score:basicChords</span>.<br />
						</td>
					</tr>
					<tr>
						<td valign="top" class="code">score:midiChord
						</td>
						<td valign="top">Contained in <em>Output Chord</em> elements
					<table>

						<tr style="vertical-align: top">
							<td>Attributes
							</td>
							<td></td>
						</tr>
						<tr>
							<td valign="top" class="code">hasChordOff
							</td>
							<td valign="top">Optional. 0 = false, 1 = true. Default is true.
							</td>
						</tr>
						<tr>
							<td valign="top" class="code">pitchWheelDeviation
							</td>
							<td valign="top">Optional. MIDI pitch wheel deviation. [0..127]<br />
								Coarse control byte only. Default is no change (i.e. the channel setting is 
                                changed permanently).
							</td>
						</tr>
						<tr>
							<td valign="top" class="code">minBasicChordMsDuration
							</td>
							<td valign="top">Optional. The minimum duration of a of a <span class="code">basicChord
							</span>in
                                this <span class="code">score:midiChord</span>. Default is 1.
							</td>
						</tr>
						<tr>
							<td valign="top">
								<span class="attcon">Content</span>:
							</td>
							<td valign="top"></td>
						</tr>

						<tr>
							<td valign="top" class="code">basicChords
							</td>
							<td valign="top">See below. This element must exist.
							</td>
						</tr>
						<tr>
							<td valign="top" class="code">sliders
							</td>
							<td valign="top">Optional. See below.
							</td>
						</tr>
					</table>
						</td>
					</tr>
					<tr>
						<td valign="top" class="code" style="padding-top: 4px">basicChords</td>
						<td>Contained in <span class="code">score:midiChord</span> elements
                    <table>
						<tr>
							<td valign="top">
								<span class="attcon">Attributes&nbsp;</span>
							</td>
							<td valign="top">none
							</td>
						</tr>
						<tr>
							<td valign="top">
								<span class="attcon">Content</span>
							</td>
							<td valign="top">A outputSequence of <span class="code">basicChord </span>elements. The outputSequence
                                must exist,
                                and it must contain at least one <span class="code">basicChord</span>.
							</td>
						</tr>
					</table>
						</td>
					</tr>
					<tr>
						<td valign="top" class="code" style="padding-top: 4px">basicChord
						</td>
						<td>Contained in <span class="code">basicChords</span> elements
                    <table>
						<tr>
							<td valign="top">
								<span class="attcon">Attributes</span>
							</td>
						</tr>
						<tr>
							<td valign="top" class="code">msDuration
							</td>
							<td valign="top">Obligatory. An integer.
							</td>
						</tr>
						<tr>
							<td valign="top" class="code">bank
							</td>
							<td valign="top">Optional. MIDI bank index. [0..127]. Default is no change.<br />
								Overrides <span class="code">score:midiChord.bank</span>.
							</td>
						</tr>
						<tr>
							<td valign="top" class="code">patch
							</td>
							<td valign="top">Optional. MIDI patch index. [0..127]. Default is no change.<br />
								Overrides <span class="code">score:midiChord.patch</span>.
							</td>
						</tr>
						<tr>
							<td valign="top" class="code">hasChordOff</td>
							<td>Optional. 0 = false, 1 = true. Default is true.</td>
						</tr>
						<tr>
							<td valign="top" class="code">pitches
							</td>
							<td valign="top">Obligatory. A series of one or more integers in range [0..127] separated
                                by spaces.
                                The numbers are MIDI note numbers in ascending order.
							</td>
						</tr>
						<tr>
							<td valign="top" class="code">velocities
							</td>
							<td valign="top">Obligatory. A series of integers in range [0..127] separated by spaces.<br />
								The numbers are MIDI velocities corresponding to the MIDI notes.
							</td>
						</tr>
						<tr>
							<td valign="top">
								<span class="attcon">Content</span>
							</td>
							<td valign="top">none
							</td>
						</tr>
					</table>
						</td>
					</tr>
					<tr>
						<td valign="top" class="code" style="padding-top: 4px">sliders
						</td>
						<td>Contained in <span class="code">score:midiChord</span> elements
                    <table>
						<tr>
							<td valign="top">Optional. If the <span class="code">sliders</span> element is present
                                then it has one
                                or more of the attributes below, each of which defines an envelope:<br />
								The first integer in each series is the value of the controller at the beginning
                                of the envelope, the last integer is the value of the controller at the end of the
                                envelope. Between these, there can be any number of values, which are distributed
                                at equal intervals across the envelope.
							</td>
						</tr>
					</table>
							<table>
								<tr>
									<td valign="top">
										<span class="attcon">Attributes</span>
									</td>
									<td valign="top"></td>
								</tr>
								<tr>
									<td valign="top" class="code">pitchWheel
									</td>
									<td valign="top">Optional. A series of integers in range [0..127] separated by spaces.<br />
										The numbers are "coarse adjust" values for The MIDI pitchwheel control.
									</td>
								</tr>
								<tr>
									<td valign="top" class="code">pan
									</td>
									<td valign="top">Optional. A series of integers in range [0..127] separated by spaces.<br />
										The numbers are "coarse adjust" values for The MIDI pan position control.
									</td>
								</tr>
								<tr>
									<td valign="top" class="code">modulationWheel
									</td>
									<td valign="top">Optional. A series of integers in range [0..127] separated by spaces.<br />
										The numbers are "coarse adjust" values for The MIDI modulation wheel control.
									</td>
								</tr>
								<tr>
									<td valign="top" class="code">expressionSlider&nbsp;</td>
									<td valign="top">Optional. A series of integers in range [0..127] separated by spaces.<br />
										The numbers are "coarse adjust" values for The MIDI expression control.
									</td>
								</tr>
								<tr>
									<td valign="top">
										<span class="attcon">Content</span>
									</td>
									<td valign="top">none
									</td>
								</tr>
							</table>
						</td>
					</tr>
					<tr>
						<td valign="top" class="code" style="padding-top: 4px">score:ccSettings
						</td>
						<td>Contained in <em>Input Chord</em> elements. Optional.<br />
							Defines the behaviour of the standard midi keyboard continuous controllers (pressure, pitchWheel
                            and
                                modWheel), with
                                                    respect to each output track, from this point on in a performance. (The Assistant Composer ensures
                            that
                                there is never
                                                    more than one <span class="code">ccSettings</span> element at a particular <strong><em>msPositionInScore</em></strong>.)
                            Different output tracks can react differently to the continuous controllers. The Assistant Performer treats controllers <em>individually</em>
							within the <span class="code">ccSettings</span>: If a particular controller is not set for a particular track, the
                                                    current setting persists.<br />
							The Assistant Performer&#39;s default, before the score is loaded, is for all three controllers to be disabled for all tracks.
					<table>
						<tr>
							<td valign="top" width="84px">
								<span class="attcon">Attributes</span>
							</td>
							<td valign="top">none</td>
						</tr>
						<tr>
							<td valign="top" width="84px">
								<span class="attcon">Content</span><br />
							</td>
							<td valign="top">An optional <span class="code">default</span> element and/or one or more <span class="code">track</span> elements.<br />
								A <span class="code">default</span> element defines settings for all the output channels.<br />
								A <span class="code">track</span> element provides settings for a particular output channel, overriding the <span class="code">default</span>
								element settings (if present).<br />
								Attributes:<br />
								<span class="code">track</span> elements have a <span class="code">midiChannel</span> attribute (an integer, in range 
								0..15),<br />
								otherwise the attributes are the same in both cases:
						<table style="margin-left: 20px">
							<tr>
								<td width="95px">Attribute</td>
								<td>possible values</td>
							</tr>
							<tr>
								<td width="95px" style="vertical-align: top"><span class="code">pressure</span></td>
								<td>
									<div class="indent2Size">
										&quot;disabled&quot;, &quot;aftertouch&quot;, &quot;channelPressure&quot;, &quot;modulation&quot;, &quot;volume&quot;, &quot;expression&quot;, &quot;timbre&quot;, 
								&quot;brightness&quot;, &quot;effects&quot;, &quot;tremolo&quot;, &quot;chorus&quot;, &quot;celeste&quot;, &quot;phaser&quot;
									</div>
								</td>
							</tr>
							<tr>
								<td width="95px" class="auto-style4"><span class="code">pitchWheel</span></td>
								<td class="auto-style4" style="font-size: 90%">&quot;pitch&quot;, &quot;pan&quot;, &quot;speed&quot;</td>
							</tr>
							<tr>
								<td width="95px"><span class="code">modWheel</span></td>
								<td>same as pressure (see above)</td>
							</tr>
							<tr>
								<td width="95px" style="vertical-align: top"><span class="code">maxVolume</span></td>
								<td>An integer in range 1..127. This attribute is only present when either the <span class="code">pressure</span> or <span class="code">modWheel</span> is set to "volume".</td>
							</tr>
							<tr>
								<td width="95px" style="vertical-align: top"><span class="code">minVolume</span></td>
								<td>An integer greater than 0 and less than <span class="code">maxVolume</span>. This attribute is only present when either the <span class="code">pressure</span> or <span class="code">modWheel</span> is set to "volume".</td>
							</tr>
							<tr>
								<td width="95px" style="vertical-align: top"><span class="code">pitchWheelDeviation</span></td>
								<td>An integer in range 0..127. This attribute is only present when <span class="code">pitchWheel</span> is set to "pitch".
														<div class="indent2Size">
															The number of semitones by which the pitch glissandos upwards when the 
															pitchWheel is moved from its middle position to its maximum position.
									</div>
								</td>
							</tr>
							<tr>
								<td width="95px" style="vertical-align: top"><span class="code">panOrigin</span></td>
								<td>An integer in range 0..127. This attribute is only present when <span class="code">pitchWheel</span> is set to "pan".<div class="indent2Size">
									The pan position associated with the pitchWheel's middle position. 
								</div>
								</td>
							</tr>
							<tr>
								<td width="95px" style="vertical-align: top"><span class="code">speedDeviation</span></td>
								<td>A floating point number &gt;= 1. This attribute is only present when <span class="code">pitchWheel</span> is set to "speed".<br />
									<div class="indent2Size">
										Maximum speed is when durations = durations / speedDeviation<br />
										Minimum speed is when durations = durations * speedDeviation 
									</div>
								</td>
							</tr>
						</table>
								Neither <span class="code">default</span> elements nor <span class="code">track</span> elements have content.<br />
							</td>
						</tr>
					</table>
						</td>
					</tr>
					<tr>
						<td valign="top" class="code" style="padding-top: 4px">score:inputNotes
						</td>
						<td>Contained in <em>Input Chord</em> elements
					<table>
						<tr>
							<td valign="top" width="84px">
								<span class="attcon">Attributes</span>
							</td>
							<td valign="top">none</td>
						</tr>
						<tr>
							<td valign="top" width="84px">
								<span class="attcon">Content</span><br />
							</td>
							<td valign="top">A outputSequence of one or more
								<span class="code">inputNote</span>
								elements.<br />
								This list may not be empty.</td>
						</tr>
					</table>
						</td>
					</tr>
					<tr>
						<td valign="top">
							<span class="code">inputNote</span></td>
						<td valign="top">
							<span class="attcon">Contained in <span class="code">score:inputNotes</span> elements<br />
								Attributes</span>:<br />
							<table>
								<colgroup>
									<col width="100" />
									<col width="*" />
								</colgroup>
								<tr>
									<td valign="top" class="code">notatedKey </td>
									<td valign="top">Compulsory. The midi value of the <em>notated</em> key (the notehead).<br />
									</td>
								</tr>
								<tr>
									<td valign="top">
										<span class="attcon">Content</span>:
									</td>
									<td valign="top"></td>
								</tr>
								<tr>
									<td valign="top">
										<span class="code">noteOn</span>
									</td>
									<td valign="top">Optional. Things to do when this <span class="code">inputNote</span>&#39;s noteOn arrives.</td>
								</tr>
								<tr>
									<td valign="top">
										<span class="code">noteOff</span>
									</td>
									<td valign="top">Optional. Things to do when this <span class="code">inputNote</span>&#39;s noteOff arrives.</td>
								</tr>
								<tr>
									<td valign="top" class="code">trkOptions</td>
									<td valign="top">Optional.</td>
								</tr>
							</table>
						</td>
					</tr>
					<tr>
						<td valign="top">
							<span class="code">noteOn</span> and <span class="code">noteOff</span>
						</td>
						<td valign="top">Contained in <span class="code">inputNote</span> elements
                        <table>
							<colgroup>
								<col width="*" />
							</colgroup>
							<tr>
								<td valign="top">
									<span class="attcon">Attributes:</span>
								</td>
								<td valign="top">none</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">Content</span>:</td>
								<td valign="top"></td>
							</tr>

							<tr>
								<td valign="top" class="code">seq
								</td>
								<td valign="top">Optional. A group of <span class="code">trkRef</span>s.
								</td>
							</tr>
							<tr>
								<td valign="top" class="code">trkOffs </td>
								<td valign="top">Optional.<br />
								</td>
							</tr>

							<tr>
								<td valign="top" class="code">trkOptions</td>
								<td valign="top">Optional in
							<span class="code">noteOn</span>, not present in <span class="code">noteOff</span>.
								</td>
							</tr>
						</table>
						</td>
					</tr>
					<tr>
						<td valign="top">
							<span class="code">seq</span>
						</td>
						<td valign="top">Can be contained in both <span class="code">noteOn</span> and <span class="code">noteOff</span> elements.&nbsp;
                        <table>
							<colgroup>
								<col width="*" />
							</colgroup>
							<tr>
								<td valign="top">
									<span class="attcon">Attributes:</span>
								</td>
								<td valign="top">none</td>
							</tr>
							<tr>
								<td valign="top">
									<span class="attcon">Content</span>:</td>
								<td valign="top"></td>
							</tr>

							<tr>
								<td valign="top" class="code">trkRef
								</td>
								<td valign="top">One or more of these.
								</td>
							</tr>
							<tr>
								<td valign="top" class="code">trkOptions</td>
								<td valign="top">Optional in
							<span class="code">noteOn</span>, not present in <span class="code">noteOff</span>.
								</td>
							</tr>
						</table>
						</td>
					</tr>
					<tr>
						<td valign="top">
							<span class="code">trkRef</span>
						</td>
						<td valign="top">Contained in <span class="code">noteOn</span> and <span class="code">noteOff</span> elements.&nbsp;
                        <table>
							<colgroup>
								<col width="*" />
							</colgroup>
							<tr>
								<td valign="top">
									<span class="attcon">Attributes:</span>
								</td>
								<td valign="top">&nbsp;</td>
							</tr>
							<tr>
								<td valign="top" class="code">midiChannel
								</td>
								<td valign="top">The <em><strong>Trk</strong></em>&#39;s midiChannel.
								</td>
							</tr>
							<tr>
								<td valign="top" class="code">msPosition
								</td>
								<td valign="top">The msPositionInScore of the first chord or rest in the <em><strong>Trk</strong></em>.
								<span class="red">Question: can this value be different from the msPositionInScore of the containing <em>InputChord </em>?</span>
								</td>
							</tr>
							<tr>
								<td valign="top" class="code">nMidiObjects </td>
								<td valign="top">The total number of chords and rests in the <em><strong>Trk</strong></em>.
								</td>
							</tr>
							<tr>
								<td valign="top">Content:</td>
								<td valign="top">&nbsp;</td>
							</tr>
							<tr>
								<td valign="top"><span class="code">trkOptions</span></td>
								<td valign="top">Optional.
								</td>
							</tr>
						</table>
						</td>
					</tr>
					<tr>
						<td valign="top">
							<span class="code">trkOffs</span>
						</td>
						<td valign="top">Can be contained in <span class="code">noteOn</span> and <span class="code">noteOff</span> elements.
                        <table>
							<colgroup>
								<col width="*" />
							</colgroup>
							<tr>
								<td valign="top">
									<span class="attcon">Attributes</span>
								</td>
								<td valign="top"></td>
							</tr>

							<tr>
								<td valign="top" class="code">midiChannels
								</td>
								<td valign="top">Compulsory. A string containing space-separated integers that are the channels to be sent <em>TrkOff</em> messages.&nbsp; 
									The integers are in range 0..15.</td>
							</tr>

							<tr>
								<td valign="top">
									<span class="attcon">Content</span>
								</td>
								<td valign="top">none</td>
							</tr>
						</table>
						</td>
					</tr>
					<tr>
						<td valign="top">
							<span class="code">trkOptions</span>
						</td>
						<td valign="top">Optionally contained in <em>Input
                Chord</em>, <span class="code">inputNote</span>, <span class="code">noteOn</span>, <span class="code">noteOff</span>,
			<span class="code">seq</span> and <span class="code">trkRef</span> elements.<br />
							Unlike the <span class="code">ccSettings</span>, these options are applied to a <em><strong>Trk</strong></em> before
			a performance begins.<br />
							The <span class="code">trkOptions</span> that apply are the result of cascading the <span class="code">trkOptions</span>
							in&nbsp;the above elements. The Assistant Performer does 
			the cascading, and overrides higher level 
			options <em>individually</em>. It also persists the&nbsp; <span class="code">trkOptions</span> defined in an <em>Input
                Chord</em>, as if they are defined in all subsequent <em>Input
                Chord</em>s until the next <em>Input
                Chord</em> that contains an explicit <span class="code">trkOptions</span> element. The persistence over time is also
			handled 
			<em>individually</em> per option.<br />
							The Assistant Performer&#39;s default <span class="code">trkOptions</span> are such that the score plays as written in 
							its
							<em>OutputVoice</em>s.<br />
							<table>
								<colgroup>
									<col width="100" />
									<col width="*" />
								</colgroup>
								<tr>
									<td valign="top">
										<span class="attcon">Attibutes:</span>
									</td>
									<td valign="top">&nbsp;</td>
								</tr>
								<tr>
									<td valign="top" class="code">velocity </td>
									<td valign="top">Optional. A string describing how the <em>velocity</em> value of a
                                received noteOn is to be used. Default is to use the velocity notated in the score.<br />
										<span class="code">velocity</span> values can be:
                                <ul class="ulStandard">
									<li>&quot;undefined&quot; - the velocity notated in the score is used. this can be used to override another <span class="code">velocity</span> setting 
										in the cascade.</li>
									<li>&quot;scaled&quot; - the velocities defined in the score are scaled depending on the value of the performer&#39;s 
										velocity (corrrected for <span class="code">minVelocity</span>).</li>
									<li>&quot;shared&quot; - the velocity will be half the velocity notated in the score, plus half the (corrected) performer&#39;s
										velocity.</li>
									<li>&quot;overriden&quot; - the velocity will be the (corrected) performer&#39;s velocity. Velocities notated in the score will
										be ignored.</li>
								</ul>
									</td>
								</tr>
								<tr>
									<td valign="top" class="code">minVelocity</td>
									<td valign="top">Is present only if <span class="code">velocity</span> is present and not set to &quot;undefined&quot;.
									This is then the minimum velocity value that can be sent to any midi channel.<br />
										<span class="code">minVelocity</span> is always in range [1..127].
									</td>
								</tr>

								<tr>
									<td valign="top" class="code">pedal </td>
									<td valign="top">Optional. A string describing what happens when a noteOff is received
                                while the <em>Seq</em> is playing. Default is the current value of this option in
                                the <em>midi input channel</em>. The <span class="code">noteOnVel</span> options are always taken into account.<br />
										Values can be:
                                <ul class="ulStandard">
									<li>&quot;undefined&quot; - turns this option off. The <em>Trk</em> will play as written in the score.</li>
									<li>&quot;holdLast&quot; - removes noteOffs from the <em>Trk</em>&#39;s last moment that contains any, and don&#39;t send allNotesOff.</li>
									<li>&quot;holdAll&quot; - removes all noteOff messages from the <em>Trk</em>, and don&#39;t send allNotesOff.</li>

									<li>&quot;holdAllStop&quot; - like holdAll, but sends AllNotesOff when the track stops (or is stopped).</li>
								</ul>
									</td>
								</tr>
								<tr>
									<td valign="top" class="code">speed </td>
									<td valign="top">Optional. An floating point number greater than 0.<br />
										This is the factor by which to divide the durations written in the score before the performance begins.<br />
										Default is for durations to be performed as written in the score (i.e. speed=1). Setting speed=2 doubles the speed (i.e. 
										halves the durations).
										<br />
									</td>
								</tr>
								<tr>
									<td valign="top" class="code">trkOff </td>
									<td valign="top">Optional. A string that describes what happens when the Trk recieves a TrkOff message while it is playing.<br />
										<ul class="ulStandard">
											<li>&quot;undefined&quot; - turns this option off. The <em>Trk</em> will not stop, but play as written in the score until it 
										completes.</li>
											<li>&quot;stopChord&quot; - stop when the current chord or rest completes.</li>
											<li>&quot;stopNow&quot; - stop immediately, even inside a chord.</li>

											<li>&quot;fade&quot; - fade the velocity until the end of the track.</li>
										</ul>
										<br />
									</td>
								</tr>
								<tr>
									<td valign="top">
										<span class="attcon">Content</span>:
									</td>
									<td valign="top">None.</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>
		</div>
		<!-- bottom of SVG elements -->
		<hr class="hrHeight1" />
		<!-- top of Further Notes -->
		<div>
			<a id="furtherNotes"></a>
			<p class="header3">
				Notes (January 2016)
			</p>
			<ul class="ulStandard">
				<li>If there are any <em>Input Voice</em>s in the score, the Assistant Composer 
                    automatically includes all the <em>Output Voice</em>s in the file, so that <em>Input
                        Voice</em>s always 
                    have access to the midi information to which they refer. <em>Output Voice</em>s can, however, easily be made invisible.
				</li>
				<li>If they are visible, <em>Output Stave</em>s are displayed at a smaller size than <em>Input Stave</em>s,
                    and are printed above the <em>Input Stave</em>s in each <em>System</em>.</li>
					<li>The same midi channel is never allocated to more than one <em>Output Voice</em>, but this is not true of <em>Input Voice</em>s.
					There may be more than one parallel <em>Input Voice</em>, and <em>Input Voice</em>s can share the same midi input 
                    channel (i.e. be played by the same polyphonic input device). The Assistant Composer
                    can write any number of <em>Input Staves</em>, each of which
                    can contain up to two <em>Input Voice</em>s.</li>
			</ul>
		</div>
	</div>
	<!-- bottom of main div -->
	<br />
	<div id="footnote" style="font-size: 11px; line-height: 16px;">
		ji — www March 2016<br />
	</div>
</body>
</html>
